sampleData[1, c('TotalIntenCh2')] = 50000
sampleData[1, c('FiberWidthCh1')] = 10
sampleData[1, c('VarIntenCh4')] = 100
sampleData$TotalIntenCh2
sampleData = training[1,]
sampleData[1,names(sampleData)] = rep(NA, length(names(sampleData)))
sampleData = rbind(sampleData, sampleData)
sampleData = rbind(sampleData, sampleData)
sampleData[1, c('TotalIntenCh2')] = 23000
sampleData[1, c('FiberWidthCh1')] = 10
sampleData[1, c('PerimStatusCh1')] = 2
sampleData$TotalIntenCh2
sampleData[2, c('TotalIntenCh2')] = 50000
sampleData[2, c('FiberWidthCh1')] = 10
sampleData[2, c('VarIntenCh4')] = 100
sampleData$TotalIntenCh2
sampleData$FiberWidthCh1
sampleData[3, c('TotalIntenCh2')] = 57000
sampleData[3, c('FiberWidthCh1')] = 8
sampleData[3, c('VarIntenCh4')] = 100
sampleData[4, c('FiberWidthCh1')] = 8
sampleData[4, c('VarIntenCh4')] = 100
sampleData[4, c('PerimStatusCh1')] = 2
sampleData$TotalIntenCh2
sampleData$FiberWidthCh1
predict(modFit, sampleData)
predict(modFit, testing)
predict(modFit, sampleData)
predict(modFit, testing)
sampleData = training[1,]
View(sampleData)
sampleData = rbind(sampleData, sampleData)
sampleData = rbind(sampleData, sampleData)
View(sampleData)
sampleData[1, c('TotalIntenCh2')] = 23000
sampleData[1, c('FiberWidthCh1')] = 10
sampleData[1, c('PerimStatusCh1')] = 2
sampleData$TotalIntenCh2
sampleData[2, c('TotalIntenCh2')] = 50000
sampleData[2, c('FiberWidthCh1')] = 10
sampleData[2, c('VarIntenCh4')] = 100
sampleData[3, c('TotalIntenCh2')] = 57000
sampleData[3, c('FiberWidthCh1')] = 8
sampleData[3, c('VarIntenCh4')] = 100
sampleData[4, c('FiberWidthCh1')] = 8
sampleData[4, c('VarIntenCh4')] = 100
sampleData[4, c('PerimStatusCh1')] = 2
sampleData$TotalIntenCh2
sampleData$FiberWidthCh1
sampleData$VarIntenCh4
predict(modFit, sampleData)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
install.packages("C:/Users/Kingsbury/Downloads/pgmm_1.0.tar.gz", repos = NULL, type = "source")
library(pgmm)
load(url("https://dl.dropboxusercontent.com/u/47814734/olive.rda"))
head(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
load(url("https://dl.dropboxusercontent.com/u/47814734/olive.rda"))
View(olive)
View(olive)
head(olive)
olive = olive[,-1]
View(olive)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(olive)
lobrary(caret)
library(caret)
modFit <- train(Area ~., method="rpart", data=olive)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=newdata)
View(olive)
load(url("https://dl.dropboxusercontent.com/u/47814734/olive.rda"))
head(olive)
newdata = as.data.frame(t(colMeans(olive)))
library(caret)
modFit <- train(Area ~., method="rpart", data=olive)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=newdata)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modFit <- train(Area ~., method="rpart", data=olive)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(testSA)
names(SAheart)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=SAheart)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass = function(values,prediction)
{sum(((prediction > 0.5)*1) != values)/length(values)}
SAheart$chd
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction)
{sum(((prediction > 0.5)*1) != values)/length(values)}
predicted <-predict(modFit, newdata=testSA)
missClass(testSA$chd, predicted)
missClass(trainSA$chd, predict(modFit, newdata=trainSA))
missClass(testSA$chd, predicted)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <-as.factor(vowel.train$y)
vowel.test$y <-as.factor(vowel.test$y)
View(vowel.test)
library(caret)
modFit <- train(y ~., method="rf", data=vowel.train, prox=TRUE)
?varImp
varImp(modFit)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <-as.factor(vowel.train$y)
vowel.test$y <-as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~., method="rf", data=vowel.train, prox=TRUE)
varImp(modFit)
load(url("https://dl.dropboxusercontent.com/u/47814734/olive.rda"))
head(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
library(caret)
?tree
??tree
?rpart
??rpart
load(url("https://dl.dropboxusercontent.com/u/47814734/olive.rda"))
head(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
library(caret)
View(olive)
modFit <- train(Area ~., method="rpart", data=olive)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=newdata)
a<-predict(modFit, newdata=newdata)
View(newdata)
print(modFit$finalModel)
View(newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(SAheart)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction)
{sum(((prediction > 0.5)*1) != values)/length(values)}
predicted <-predict(modFit, newdata=testSA)
missClass(trainSA$chd, predict(modFit, newdata=trainSA))
missClass(testSA$chd, predicted)
1/exp(0.03181)
1/exp(-0.03181)
summary(logRegshuttle <- glm(use ~ wind,family="binomial", data=shuttle ))
library(MASS)
summary(logRegshuttle <- glm(use ~ wind,family="binomial", data=shuttle ))
exp(-0.03181)
summary(logRegshuttle <- glm(use ~ wind+magn,family="binomial", data=shuttle ))
summary(glm(shuttle$use ~ shuttle$wind + shuttle$magn, family="binomial"))
1-3.201e-02
data(InsectSprays)
names(InsectSprays)
glm(InsectSpraysa$count ~ as.factor(InsectSprays$spray),family="poisson")
glm(InsectSprays$count ~ as.factor(InsectSprays$spray),family="poisson")
2.67415/0.05588
0.05588/2.67415
glm(as.factor(InsectSprays$spray) ~ InsectSprays$count ,family="poisson")
glm(InsectSprays$count ~ as.factor(InsectSprays$spray), family="poisson")
glm(InsectSprays$count ~ InsectSprays$spray, family="poisson")
2.67415/.05588
1/exp(0.05588)
-1.02416+2.03723
library (ElemStatLearn)
library (caret)
data (vowel.train)
data (wowel.test)
data (wowel.test)
data (vowel.test)
str(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
model1 <- train (y ~.,data=vowel.train,method='rf')
data (vowel.train)
data (vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
model1 <- train (y ~.,data=vowel.train,method='rf')
model2 <- train (y ~., data= vowel.train,method ='glm' )
model2 <- train (y ~., data= vowel.train, method ='glm' )
str (vowel.train)
model2 <- train (y ~., data=vowel.train, method ='glm' )
data (vowel.train)
data (vowel.test)
library (ElemStatLearn)
library (caret)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
str (vowel.train)
model2 <- train (y ~., data=vowel.train, method ='glm' )
library(caret);
library(ElemStatLearn);
data(vowel.train);
data(vowel.test);
set.seed(33833);
vowel.train$y = factor(vowel.train$y);
vowel.test$y = factor(vowel.test$y);
train_model_GBM = train(y ~ ., method="gbm", data = vowel.train);
train_model_RF = train(y ~ ., method="rf", data = vowel.train);
predict_RF = predict(train_model_RF, vowel.test);
predict_GBM = predict(train_model_GBM, vowel.test);
accuracy_GBM = (vowel.test$y == predict_GBM);
accuracy_RF = (vowel.test$y == predict_RF);
length(accuracy_GBM[accuracy_GBM == TRUE]);
length(accuracy_RF[accuracy_RF == TRUE]);
length(accuracy_RF[accuracy_RF == TRUE]) / length(accuracy_RF);
length(accuracy_GBM[accuracy_GBM == TRUE]) / length(accuracy_GBM);
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
set.seed(62433)
train_model_RF = train(diagnosis ~ ., method="rf", data = training);
train_model_LDA = train(diagnosis ~ ., method="lda", data = training);
train_model_GBM = train(diagnosis ~ ., method="gbm", data = training);
pred1<-predict(train_model_RF, testing)
pred2<-predict(train_model_LDA, testing)
pred3<-predict(train_model_GBM, testing)
?data.frame
predDF <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~ ., method="gam", data=predDF)
combPred <-predict(combModFit, predDF)
accuracy_RF = (testing$diagnosis == pred1);
accuracy_LDA = (testing$diagnosis == pred2);
accuracy_GBM = (testing$diagnosis == pred3);
length(accuracy_RF[accuracy_RF == TRUE]);
length(accuracy_LDA[accuracy_LDA == TRUE]);
length(accuracy_GBM[accuracy_GBM == TRUE]);
length(accuracy_RF[accuracy_RF == TRUE]) / length(accuracy_RF);
length(accuracy_LDA[accuracy_LDA == TRUE]) / length(accuracy_LDA);
length(accuracy_GBM[accuracy_GBM == TRUE]) / length(accuracy_GBM);
accuracy_combi = (testing$diagnosis == combPred);
length(accuracy_combi[accuracy_combi == TRUE]);
length(accuracy_combi[accuracy_combi == TRUE]) / length(accuracy_combi);
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
train_model_RF = train(diagnosis ~ ., method="rf", data = training);
train_model_LDA = train(diagnosis ~ ., method="lda", data = training);
train_model_GBM = train(diagnosis ~ ., method="gbm", data = training);
pred1<-predict(train_model_RF, testing)
pred2<-predict(train_model_LDA, testing)
pred3<-predict(train_model_GBM, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~ ., method="gam", data=predDF)
combPred <-predict(combModFit, testing)
accuracy_RF = (testing$diagnosis == pred1);
accuracy_LDA = (testing$diagnosis == pred2);
accuracy_GBM = (testing$diagnosis == pred3);
accuracy_combi = (testing$diagnosis == combPred);
length(accuracy_RF[accuracy_RF == TRUE]);
length(accuracy_LDA[accuracy_LDA == TRUE]);
length(accuracy_GBM[accuracy_GBM == TRUE]);
length(accuracy_combi[accuracy_combi == TRUE]);
length(accuracy_RF[accuracy_RF == TRUE]) / length(accuracy_RF);
length(accuracy_LDA[accuracy_LDA == TRUE]) / length(accuracy_LDA);
length(accuracy_GBM[accuracy_GBM == TRUE]) / length(accuracy_GBM);
length(accuracy_combi[accuracy_combi == TRUE]) / length(accuracy_combi);
predDF <- data.frame(pred1, pred2, pred3, diagnosis=training$diagnosis)
predDF <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~ ., method="gam", data=predDF)
combPred <-predict(combModFit, predDF)
accuracy_combi = (testing$diagnosis == combPred);
length(accuracy_combi[accuracy_combi == TRUE]);
length(accuracy_RF[accuracy_RF == TRUE]) / length(accuracy_RF);
length(accuracy_LDA[accuracy_LDA == TRUE]) / length(accuracy_LDA);
length(accuracy_GBM[accuracy_GBM == TRUE]) / length(accuracy_GBM);
length(accuracy_combi[accuracy_combi == TRUE]) / length(accuracy_combi);
combPred
accuracy_combi = (testing$diagnosis == combPred);
length(accuracy_RF[accuracy_RF == TRUE]);
length(accuracy_LDA[accuracy_LDA == TRUE]);
length(accuracy_GBM[accuracy_GBM == TRUE]);
length(accuracy_combi[accuracy_combi == TRUE]);
pred1
View(predDF)
predDF <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~ ., method="rf", data=predDF)
combPred <-predict(combModFit, predDF)
combPred
accuracy_RF = (testing$diagnosis == pred1);
accuracy_LDA = (testing$diagnosis == pred2);
accuracy_GBM = (testing$diagnosis == pred3);
accuracy_combi = (testing$diagnosis == combPred);
length(accuracy_RF[accuracy_RF == TRUE]);
length(accuracy_LDA[accuracy_LDA == TRUE]);
length(accuracy_GBM[accuracy_GBM == TRUE]);
length(accuracy_combi[accuracy_combi == TRUE]);
length(accuracy_RF[accuracy_RF == TRUE]) / length(accuracy_RF);
length(accuracy_LDA[accuracy_LDA == TRUE]) / length(accuracy_LDA);
length(accuracy_GBM[accuracy_GBM == TRUE]) / length(accuracy_GBM);
length(accuracy_combi[accuracy_combi == TRUE]) / length(accuracy_combi);
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?plot.enet
library(caret)
?plot.enet
??plot.enet
?lasso
library(caret)
?lasso
set.seed(233)
train_model_lasso = train(CompressiveStrength ~ ., method="lasso", data = training);
?plot.enet
summary(train_model_lasso)
plot(train_model_lasso)
View(concrete)
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
train_model_lasso = train(CompressiveStrength ~ ., method="lasso", data = training);
summary(train_model_lasso)
plot(train_model_lasso)
?plot.enet
plot(train_model_lasso, xvar="penalty")
plot(train_model_lasso)
?plot.enet
plot(train_model_lasso, xvar = c("fraction", "penalty", "L1norm", "step"))
plot.enet(train_model_lasso, xvar = c("fraction", "penalty", "L1norm", "step"))
plot.enet(train_model_lasso)
plot(train_model_lasso)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
?svm
set.seed(325)
model <-svm(CompressiveStrength ~.,training)
predicsvm<-predict(model, testing)
sqrt(sum((predicsvm-testing$CompressiveStrength)^2))
summary(predicsvm)
sqrt(sum((predicsvm-testing$CompressiveStrength)^2))
predicsvm-testing$CompressiveStrength
sqrt(sum(((predicsvm-testing$CompressiveStrength)/length(predicsvm)^2))
predicsvm-testing$CompressiveStrength
sqrt(sum(((predicsvm-testing$CompressiveStrength)/length(predicsvm))^2))
install.packages("httr")
install.packages("sqldf")
setwd("C:\\Users\\Kingsbury\\Documents\\GitHub\\devdataprod")
library(shiny)
runApp()
install.packages("googleVis")
runApp()
library(datasets)
states <- data.frame(state.name, state.x77)
View(states)
bla <-data(swiss)
bla <-data.frame(swiss)
View(bla)
bla <-data.frame(WorldPhones)
View(bla)
runApp()
bla <-data.frame(volcano)
View(bla)
bla <-data.frame(WorldPhones)
View(bla)
states <- data.frame(WorldPhones)
states[,-1]
View(states)
states <- data.frame(state.name, state.x77)
View(states)
states[,-1]
a<-states[,-1]
View(a)
View(bla)
View(a)
colnames(states[,-1])
colnames(states)
colnames(bla)
View(bla)
View(states)
library(reshape2)
melt(bla)
dcast(melt(bla), variable~value)
dcast(melt(bla), ...~value)
bbb <-dcast(melt(bla), ...~value)
View(bbb)
View(bla)
melt(bla)
bla$year<-row.names(bla)
View(bla)
bbb <-dcast(melt(bla), ...~value)
View(bbb)
bbb <-dcast(melt(bla), ...~year)
View(bbb)
bbb$variable
phones <-data.frame(WorldPhones)
phones$year<-row.names(phones)
View(phones)
View(states)
View(states)
View(bla)
View(bbb)
runApp()
runApp()
View(bbb)
?gvisGeoChart
runApp()
View(phones)
View(phones)
View(bbb)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(bbb)
bbb$laender <- data.frame(c("Bavaria", "Berlin", "Saxony", "Hesse", "Saarland", "Thuringia", "Bremen"))
View(bbb)
bbb$laender <- c("Bavaria", "Berlin", "Saxony", "Hesse", "Saarland", "Thuringia", "Bremen")
View(bbb)
phones <- data.frame(WorldPhones)
phones$year<-row.names(phones)
phones$laender <- c("Bavaria", "Berlin", "Saxony", "Hesse", "Saarland", "Thuringia", "Bremen")
phones <-dcast(melt(phones), ...~year)
View(phones)
phones <- data.frame(WorldPhones)
View(phones)
phones$year<-row.names(phones)
phones <-dcast(melt(phones), ...~year)
phones <- data.frame(WorldPhones)
phones$year<-row.names(phones)
phones <-dcast(melt(phones), ...~year)
View(phones)
phones <- data.frame(WorldPhones)
phones$year<-row.names(phones)
phones <-dcast(melt(phones), ...~year)
View(phones)
phones<-phones[,-1]
View(phones)
phones$laender <- c("Bavaria", "Berlin", "Saxony", "Hesse", "Saarland", "Thuringia", "Bremen")
View(phones)
View(phones)
runApp()
runApp()
View(phones)
runApp()
View(phones)
runApp()
runApp()
runApp()
View(phones)
